"""
Simulator for greedy boss scenario
"""

import simpleplot
import math
import codeskulptor
codeskulptor.set_timeout(20)

STANDARD = True
LOGLOG = False

# constants for simulation
INITIAL_SALARY = 100
SALARY_INCREMENT = 100
INITIAL_BRIBE_COST = 1000


def greedy_boss(days_in_simulation, bribe_cost_increment, plot_type = STANDARD):
    """
    Simulation of greedy boss
    """
    
    # initialize necessary local variables
    salary = 0
    plot = [[0,0]]
    total_bribe = 0
    bribe = 1000
    bribe_time = 0
    space = 0
    day_salary = 100
    current_day = 0
    # define  list consisting of days vs. total salary earned for analysis
    days_vs_earnings = [[0,0]]

    # Each iteration of this while loop simulates one bribe
    while current_day <= days_in_simulation:

        # update list with days vs total salary earned
        salary += day_salary
        space += 1

        # check whether we have enough money to bribe without waiting
        if salary >= (total_bribe + bribe + bribe_cost_increment * bribe_time):
            left = day_salary
            if left > bribe + bribe_cost_increment * bribe_time:
                while left > bribe + bribe_cost_increment * bribe_time:
                    total_bribe += bribe + bribe_cost_increment * bribe_time
                    left -=  bribe + bribe_cost_increment * bribe_time
                    bribe_time += 1            
                    day_salary += 100
            else:
                total_bribe += bribe + bribe_cost_increment * bribe_time
                bribe_time += 1            
                day_salary += 100
                days_vs_earnings.append([current_day,salary])
            # advance current_day to day of next bribe (DO NOT INCREMENT BY ONE DAY)
            current_day += space
            space = 0
            # use plot_type to control whether regular or log/log plot
            if plot_type == STANDARD:
                plot.append([current_day,salary])
            else: 
                plot.append([math.log(current_day),math.log(salary)])
        # update state of simulation to reflect bribe
    print [bribe_cost_increment,round(plot[-1][1]%plot[-1][0])]
    return plot


def sample(days_in_simulation, plot_type = STANDARD):
    """
    Simulation of greedy boss
    """
    
    # initialize necessary local variables
    salary = 0
    plot = [[0,0]]
    total_bribe = 0
    bribe = 1
    bribe_time = 0
    space = 0
    day_salary = 1
    current_day = 0
    # define  list consisting of days vs. total salary earned for analysis
    days_vs_earnings = [[0,0]]

    # Each iteration of this while loop simulates one bribe
    while current_day <= days_in_simulation:
        salary += day_salary
        space += 1

        # check whether we have enough money to bribe without waiting
        if salary >= (total_bribe + bribe * 1.15**(bribe_time)):
            left = day_salary
            if left > bribe * 1.15**(bribe_time):
                while left > bribe * 1.15**(bribe_time):
                    left -=  bribe * 1.15**(bribe_time)
                    bribe_time += 1            
                    day_salary += 1
            else:
                bribe_time += 1
                day_salary += 1
                total_bribe += bribe * 1.15**(bribe_time)
            current_day += space
            space = 0
            # use plot_type to control whether regular or log/log plot
            if plot_type == STANDARD:
                plot.append([current_day,salary])
            else: 
                plot.append([math.log(current_day),math.log(salary)])
    print [sample,round(plot[-1][1]%plot[-1][0])]
    return plot
def run_simulations():
    """
    Run simulations for several possible bribe increments
    """
    plot_type = LOGLOG
    days = 70
    inc_0 = greedy_boss(days, 0, plot_type)
    inc_500 = greedy_boss(days, 500, plot_type)
    inc_1000 = greedy_boss(days, 1000, plot_type)
    inc_2000 = greedy_boss(days, 2000, plot_type)
    sample1 = sample(days, plot_type)
    simpleplot.plot_lines("Greedy boss", 600, 600, "days", "total earnings", 
                          [inc_0, inc_500, inc_1000, inc_2000,sample1], False,
                         ["Bribe increment = 0", "Bribe increment = 500",
                          "Bribe increment = 1000", "Bribe increment = 2000","sample"])

run_simulations()

print greedy_boss(35, 100)
# should print [(0, 0), (10, 1000), (16, 2200), (20, 3400), (23, 4600), (26, 6100), (29, 7900), (31, 9300), (33, 10900), (35, 12700)]

print greedy_boss(35, 0)
# should print [(0, 0), (10, 1000), (15, 2000), (19, 3200), (21, 4000), (23, 5000), (25, 6200), (27, 7600), (28, 8400), (29, 9300), (30, 10300), (31, 11400), (32, 12600), (33, 13900), (34, 15300), (34, 15300), (35, 16900)]


            
            
    
