"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(100)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set


def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    libary = {}
    max_point = 0
    for num in hand:
        libary[num] = num * hand.count(num)
    for key in libary:
        if libary[key] > max_point:
            max_point = libary[key]
    return max_point

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    dis_sides = range(1,num_die_sides+1)
    dis_sides = tuple(dis_sides)
    possible_roll = set()
    expect_point = 0.0
    possible_roll = gen_all_sequences(dis_sides, num_free_dice)
        
    for possible_dice in possible_roll:
        possible_dice = list(possible_dice)
        held_dice = list(held_dice)
        possible_dice.extend(held_dice)
        expect_point += score(possible_dice) * (1.0/len(possible_roll))
    return expect_point


def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    possible_remain = set([()])
    for dummy in range(1,len(hand)+1):
        temp = gen_all_sequences(hand, dummy)
        for tup in temp:
            hand_copy = list(hand)
            compete = False
            for dummy_num in range(len(tup)):
                if tup[dummy_num] in hand_copy:
                    hand_copy.remove(tup[dummy_num])
                elif tup[dummy_num] not in hand_copy:
                    compete = True
            tup = list(tup)
            tup.sort()
            tup = tuple(tup)
            if tup in possible_remain:
                compete = True
            if compete == False:
                possible_remain.add(tup)
    return possible_remain



def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    libary = {}
    possible_hold = gen_all_holds(hand)
    max_point = 0.0
    max_key = ()
    for hold in possible_hold:
        libary[hold] = expected_value(hold,num_die_sides, 5 - len(hold))
    for key in libary:
        if libary[key] > max_point:
            max_point = libary[key]
            max_key = key
    return (max_point, max_key)


def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (1, 1, 1, 5, 6)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
    
    
#run_example()
#print strategy((1,), 6)

#import poc_holds_testsuite
#poc_holds_testsuite.run_suite(gen_all_holds)
                                       
