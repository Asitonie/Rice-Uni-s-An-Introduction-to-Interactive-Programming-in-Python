"""
Student portion of Zombie Apocalypse mini-project
"""

import random
import poc_grid
import poc_queue
import poc_zombie_gui

# global constants
EMPTY = 0 
FULL = 1
FOUR_WAY = 0
EIGHT_WAY = 1
OBSTACLE = 5
HUMAN = 6
ZOMBIE = 7


class Apocalypse(poc_grid.Grid):
    """
    Class for simulating zombie pursuit of human on grid with
    obstacles
    """

    def __init__(self, grid_height, grid_width, obstacle_list = None, 
                 zombie_list = None, human_list = None):
        """
        Create a simulation of given size with given obstacles,
        humans, and zombies
        """
        poc_grid.Grid.__init__(self, grid_height, grid_width)
        self.obstacle_list = None
        if obstacle_list != None:
            self.obstacle_list = obstacle_list
            for cell in obstacle_list:
                self.set_full(cell[0], cell[1])
        if zombie_list != None:
            self._zombie_list = list(zombie_list)
        else:
            self._zombie_list = []
        if human_list != None:
            self._human_list = list(human_list)  
        else:
            self._human_list = []
        
    def clear(self):
        """
        Set cells in obstacle grid to be empty
        Reset zombie and human lists to be empty
        """
        poc_grid.Grid.clear(self)
        self._zombie_list = []
        self._human_list = []
        
    def add_zombie(self, row, col):
        """
        Add zombie to the zombie list
        """
        self._zombie_list.append((row,col))
                
    def num_zombies(self):
        """
        Return number of zombies
        """
        return len(self._zombie_list)      
          
    def zombies(self):
        """
        Generator that yields the zombies in the order they were
        added.
        """
        # replace with an actual generator
        for zombie in self._zombie_list:
            yield zombie

    def add_human(self, row, col):
        """
        Add human to the human list
        """
        self._human_list.append((row,col))
        
    def num_humans(self):
        """
        Return number of humans
        """
        return len(self._human_list)
    
    def humans(self):
        """
        Generator that yields the humans in the order they were added.
        """
        # replace with an actual generator
        for human in self._human_list:
            yield human
        
    def compute_distance_field(self, entity_type):
        """
        Function computes and returns a 2D distance field
        Distance at member of entity_list is zero
        Shortest paths avoid obstacles and use four-way distances
        """
        height = self.get_grid_height()
        width = self.get_grid_width()
        boundary = poc_queue.Queue()
        visited = poc_grid.Grid(height,width)
        distance_field =  [[height * width for dummy_col in range(width)] 
                           for dummy_row in range(height)]
        if entity_type == HUMAN:
            for human in self._human_list:
                boundary.enqueue(human)
        elif entity_type == ZOMBIE:
            for zombie in self._zombie_list:
                boundary.enqueue(zombie)
        for cell in boundary._items:
            visited.set_full(cell[0],cell[1])          
            distance_field[cell[0]][cell[1]] = 0
        if self.obstacle_list != None:
            for cell in self.obstacle_list:
                visited.set_full(cell[0],cell[1])  
        while len(boundary) > 0:
            current_cell = boundary.dequeue()
            neighbours = self.four_neighbors(current_cell[0], current_cell[1])
            for neighbour in neighbours:
                if visited.is_empty(neighbour[0], neighbour[1]):
                    visited.set_full(neighbour[0], neighbour[1])
                    boundary.enqueue(neighbour)
                    distance_field[neighbour[0]][neighbour[1]] = distance_field[current_cell[0]][current_cell[1]]+1
        return distance_field
    def move_humans(self, zombie_distance_field):
        """
        Function that moves humans away from zombies, diagonal moves
        are allowed
        """

        for human in self._human_list:
            max_distance = 0
            libary = {}
            best = []
#            print "HUMAN AT:", str(human)
            options = [human]
            neighbours = self.eight_neighbors(human[0], human[1])
            for neighbour in neighbours:
                if self.is_empty(neighbour[0],neighbour[1]):
                    options.append(neighbour)
#            print "OPTIONS ARE:",str(options)
            for option in options:
                libary[option] = zombie_distance_field[option[0]][option[1]]
#            print "NUMBER:",str(libary)
            for option in libary:
                if libary[option] > max_distance:
                    max_distance = libary[option]
            for option in libary:
                if libary[option] == max_distance:
                    best.append(option)
#            print "CHOOSE FROM:",str(best)
            index = self._human_list.index(human)
            best_option = random.choice(best)
#            print "FINALLY:",str(best_option)
            if best_option != human:
                self._human_list.remove(human)
#                self.set_empty(human[0],human[1])
                self._human_list.insert(index,best_option)
#                self.set_full(best_option[0],best_option[1])
    def move_zombies(self, human_distance_field):
        """
        Function that moves zombies towards humans, no diagonal moves
        are allowed
        """
        height = self.get_grid_height()
        width = self.get_grid_width()
        for zombie in self._zombie_list:
            min_distance = height * width
            libary = {}
            best = []
            options = [zombie]
            neighbours = self.four_neighbors(zombie[0], zombie[1])
            for neighbour in neighbours:
                if self.is_empty(neighbour[0],neighbour[1]):
                    options.append(neighbour)
            for option in options:
                libary[option] = human_distance_field[option[0]][option[1]]
            for option in libary:
                if libary[option] < min_distance:
                    min_distance = libary[option]
            for option in libary:
                if libary[option] == min_distance:
                    best.append(option)
            best_option = random.choice(best)
            index = self._zombie_list.index(zombie)
            if best_option != zombie:
                self._zombie_list.remove(zombie)
                self._zombie_list.insert(index,best_option)
#                self.set_full(best_option[0],best_option[1])
#                self.set_empty(zombie[0],zombie[1])
# Start up gui for simulation - You will need to write some code above
# before this will work without errors

poc_zombie_gui.run_gui(Apocalypse(30, 40))
